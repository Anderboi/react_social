{"version":3,"file":"static/js/285.058ce395.chunk.js","mappings":"qKACA,MAAuB,sB,wCCAvB,EAA4B,wBCCfA,EAAc,SAACC,GAC1B,OAAOA,EAAMC,aAAaC,UAEfC,EAAmB,SAACH,GAC/B,OAAOA,EAAMC,aAAaG,eAEfC,EAA2B,SAACL,GACvC,OAAOA,EAAMC,aAAaK,kBAGfC,EAAqB,SAACP,GACjC,OAAOA,EAAMC,aAAaO,eCZ5B,EAA6B,6BAA7B,EAA0E,gCAA1E,EAA+H,qCAA/H,EAAuS,uCAAvS,EAAgW,kCAAhW,EAAiZ,+BAAjZ,EAA0b,0B,mBCc7aC,EAA4B,SAACC,GAKxC,OACE,iBAAKC,QALS,WACd,OAAOD,EAAME,gBAAgBF,EAAMG,KAInC,WACE,iBAAKC,UAAWC,EAAhB,WAEE,gBAAKD,UAAWC,EAAhB,UACE,gBACEC,IAAKN,EAAMO,QAAUC,EACrBC,IAAI,SACJL,UAAWC,OAKf,iBAAKD,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAsCL,EAAMU,QAC5C,gBAAKN,UAAWC,EAAhB,SAAmCL,EAAMW,aAE3C,gBAAKP,UAAWC,EAAhB,uBAGF,eAAID,UAAWC,Q,UCFRO,EAAwB,SAACZ,GACpC,IAAMa,EACJb,EAAMc,OACNd,EAAMc,MAAMC,KAAI,SAACC,GAAD,OACd,SAACjB,EAAD,CACEW,KAAMM,EAAEN,KACRP,GAAIa,EAAEb,GAENQ,OAAQK,EAAEL,OACVJ,OAAQS,EAAET,OAAOU,MACjBf,gBAAiBF,EAAMkB,mBAHlBF,EAAEb,OAOb,OAAO,gBAAKC,UAAWe,EAAhB,SAA8BN,KASvC,GAAeO,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAPsB,SAAC/B,GACvB,MAAO,CACLwB,MAAOrB,EAAiBH,GACxBM,iBAAkBD,EAAyBL,MAM3C,CAAEgC,kBAAAA,EAAAA,GAAmBJ,kBAAAA,EAAAA,KAHzB,EA/BuC,SAAClB,GAKtC,OAJAuB,EAAAA,EAAAA,YAAU,WACRvB,EAAMsB,kBAAkBtB,EAAMJ,oBAC7B,CAACI,EAAMc,SAEH,SAACF,GAAD,UAAUZ,O,UClCnB,EAAgC,mCAAhC,EAAkF,kCAAlF,EAA0I,yCAA1I,EAA4M,4C,SCA5M,EAAgC,mCAAhC,EAAgF,gCAAhF,EAAoI,uCAApI,EAAkM,0CAAlM,EAA+P,sCAA/P,EAA+T,6C,uCCYlTwB,EAA+B,SAACxB,GAC3C,IAAMyB,EAAezB,EAAM0B,WAAa1B,EAAM2B,OAE9C,OACE,iBACEvB,UAAWwB,GAAAA,CACTvB,EACAoB,EAAepB,EAAwBA,GAH3C,UAMGL,EAAM6B,MACP,mBACA,iBAAMzB,UAAWC,EAAjB,SAAkCL,EAAM8B,WACxC,SAAC,IAAD,CACEC,KAAO/B,EAAMgC,OAAmBC,EAAAA,IAAVC,EAAAA,IACtB9B,UACGJ,EAAMgC,OAAgC3B,EAAvBA,Q,UC2E1B,GAP6BgB,EAAAA,EAAAA,KAPL,SAAC/B,GACvB,MAAO,CACLE,SAAUH,EAAYC,GACtB6C,gBAAiBtC,EAAmBP,GACpCqC,QAAQS,EAAAA,EAAAA,IAAU9C,MAQH,CAAE+C,YAAAA,EAAAA,IALQhB,EArEe,SAACrB,GAE3CsC,QAAQC,IAAIvC,EAAMR,UAElB,IAAMgD,EACJxC,EAAMR,UACNQ,EAAMR,SAASuB,KAAI,SAACC,GAAD,OACjB,SAACQ,EAAD,CACEK,KAAMb,EAAEa,KACR1B,GAAIa,EAAEb,GAEN2B,QAASd,EAAEc,QACXW,YAAazB,EAAEyB,YACff,SAAUV,EAAEU,SACZgB,WAAY1B,EAAE0B,WACdV,OAAQhB,EAAEgB,OACVL,OAAQ3B,EAAM2B,QANTX,EAAEb,OAUb,GAKIwC,EAAAA,EAAAA,IAAkB,CAAEC,cAAe,CAAEf,KAAM,MAJ7CgB,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OASf,OACE,iBAAK5C,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAmCmC,KAEnC,iBAAMU,SAAUJ,GAVH,SAACK,GAChBnD,EAAMqC,YAAYrC,EAAMmC,gBAAkBgB,EAAKtB,MAE/CkB,OAOE,UACE,iBAAK3C,UAAWC,EAAhB,WACE,oCACMwC,EAAS,OAAQ,CACnBO,UAAW,CACTC,MAAO,IACPC,QAAS,qCAJf,IAOElD,UAAS,UAAKmD,EAAAA,EAAAA,MAAL,YAAmBlD,GAC5BmD,KAAK,OACL9C,KAAK,OACLP,GAAG,OACHsD,YAAY,kCAEd,mBAAQrD,UAAWmD,EAAAA,EAAAA,OAAaC,KAAK,SAArC,uBAKHR,EAAOnB,OAAQ,yCCvEtB,EATiB,WACf,OACE,iBAAKzB,UAAWe,EAAhB,WACE,SAAC,EAAD,KACA,SAAC,EAAD","sources":["webpack://react-project-01/./src/components/Dailogs/Dialogs.module.css?b0d6","webpack://react-project-01/./src/components/Dailogs/ChatList/Chat.module.css?55a1","utilities/selectors/messagesSelector.ts","webpack://react-project-01/./src/components/Dailogs/ChatList/ChatListItem/ChatItem.module.css?8d85","components/Dailogs/ChatList/ChatListItem/ChatItem.tsx","components/Dailogs/ChatList/ChatContainer.tsx","webpack://react-project-01/./src/components/Dailogs/Messages/MessageList.module.css?8cd7","webpack://react-project-01/./src/components/Dailogs/Messages/MessageItem/MessageItem.module.css?5832","components/Dailogs/Messages/MessageItem/MessageItem.tsx","components/Dailogs/Messages/MessageList.tsx","components/Dailogs/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Dialogs_chat__kfTR4\"};","// extracted by mini-css-extract-plugin\nexport default {\"chat_list\":\"Chat_chat_list__pm5eC\"};","import { RootState } from \"../../redux/reduxStore\";\r\n\r\nexport const getMessages = (state: RootState) => {\r\n  return state.messagesPage.messages;\r\n};\r\nexport const getFollowedUsers = (state: RootState) => {\r\n  return state.messagesPage.followedUsers;\r\n};\r\nexport const usersOnPageCountSelector = (state: RootState) => {\r\n  return state.messagesPage.usersOnPageCount;\r\n};\r\n\r\nexport const getCurrentChatUser = (state: RootState) => {\r\n  return state.messagesPage.currentUserId;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"chat__item\":\"ChatItem_chat__item__YYG2+\",\"avatar__block\":\"ChatItem_avatar__block__k-1az\",\"avatar__block_icon\":\"ChatItem_avatar__block_icon__uASjE\",\"status_circle\":\"ChatItem_status_circle__HJz2Y\",\"green\":\"ChatItem_green__pv4I9\",\"red\":\"ChatItem_red__lBxPE\",\"chat__item_text_wrap\":\"ChatItem_chat__item_text_wrap__Uacpl\",\"chat__item_name\":\"ChatItem_chat__item_name__DzLQ0\",\"messege_text\":\"ChatItem_messege_text__ZH5E-\",\"divider\":\"ChatItem_divider__G+JtD\"};","import { NavLink } from \"react-router-dom\";\r\n//@ts-ignore\r\nimport css from \"./ChatItem.module.css\";\r\n//@ts-ignore\r\nimport avatar from \"../../../../assets/images/avatar.png\";\r\n// import { IPhotos, IUser } from \"../../../../types/types\";\r\n\r\ntype Props = {\r\n  id: number;\r\n  photos: string;\r\n  name: string;\r\n  status: string | null;\r\n  getUserMessages: (userId: number) => any; //TODO remove any\r\n};\r\n\r\nexport const ChatItem: React.FC<Props> = (props): JSX.Element => {\r\n  const onClick = () => {\r\n    return props.getUserMessages(props.id);\r\n  };\r\n\r\n  return (\r\n    <div onClick={onClick}>\r\n      <div className={css.chat__item}>\r\n        {/* <NavLink to={\"/messeges/\" + props.id} className={css.chat__item}> */}\r\n        <div className={css.avatar__block}>\r\n          <img\r\n            src={props.photos || avatar}\r\n            alt=\"avatar\"\r\n            className={css.avatar__block_icon}\r\n          />\r\n          {/* <div className={`${css.status_circle} ${css.green}`}></div> */}\r\n          {/* //TODO Add Active state */}\r\n        </div>\r\n        <div className={css.chat__item_text_wrap}>\r\n          <div className={css.chat__item_name}>{props.name}</div>\r\n          <div className={css.messege_text}>{props.status}</div>\r\n        </div>\r\n        <div className={css.messege_text}>10:04</div>\r\n        {/* </NavLink> */}\r\n      </div>\r\n      <hr className={css.divider}></hr>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/reduxStore\";\r\nimport { IUser } from \"../../../types/types\";\r\nimport c from \"./Chat.module.css\";\r\n// import { withAuthRedirect } from \"../../../hoc/withAuthRedirect\";\r\nimport {\r\n  getFollowedUsers,\r\n  usersOnPageCountSelector\r\n} from \"../../../utilities/selectors/messagesSelector\";\r\nimport { ChatItem } from \"./ChatListItem/ChatItem\";\r\nimport {\r\n  getFollowedUserTC,\r\n  getUserMessagesTC\r\n} from \"../../../redux/messagesReducer\";\r\n\r\ntype MapStateToProps = {\r\n  users: Array<IUser> | null;\r\n  usersOnPageCount: number;\r\n};\r\ntype MapDispatchToProps = {\r\n  getFollowedUserTC: (usersOnPage: number) => void;\r\n  getUserMessagesTC: (userId: number) => void;\r\n};\r\n\r\ntype OwnProps = {};\r\n\r\ntype Props = OwnProps & MapStateToProps & MapDispatchToProps;\r\n\r\nconst ChatContainer: React.FC<Props> = (props) => {\r\n  useEffect(() => {\r\n    props.getFollowedUserTC(props.usersOnPageCount);\r\n  }, [props.users]);\r\n\r\n  return <Chat {...props} />;\r\n};\r\n\r\nexport const Chat: React.FC<Props> = (props): JSX.Element => {\r\n  const usersList =\r\n    props.users &&\r\n    props.users.map((t: IUser) => (\r\n      <ChatItem\r\n        name={t.name}\r\n        id={t.id}\r\n        key={t.id}\r\n        status={t.status}\r\n        photos={t.photos.small!}\r\n        getUserMessages={props.getUserMessagesTC}\r\n      />\r\n    ));\r\n\r\n  return <div className={c.chat_list}>{usersList}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToProps => {\r\n  return {\r\n    users: getFollowedUsers(state),\r\n    usersOnPageCount: usersOnPageCountSelector(state)\r\n  };\r\n};\r\nexport default compose(\r\n  connect<MapStateToProps, MapDispatchToProps, OwnProps, RootState>(\r\n    mapStateToProps,\r\n    { getFollowedUserTC, getUserMessagesTC }\r\n  )\r\n  // withAuthRedirect //TODO add TS to 'withAuthRedirect'\r\n)(ChatContainer);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message_block\":\"MessageList_message_block__TL1rs\",\"message_list\":\"MessageList_message_list__-mgtf\",\"message_input_block\":\"MessageList_message_input_block__LiRGo\",\"message_input_textarea\":\"MessageList_message_input_textarea__E5Z-4\"};","// extracted by mini-css-extract-plugin\nexport default {\"message__item\":\"MessageItem_message__item__PFxWt\",\"item__date\":\"MessageItem_item__date__eAeAu\",\"message__item_own\":\"MessageItem_message__item_own__PEVF0\",\"message__item_friend\":\"MessageItem_message__item_friend__o+P1Y\",\"message__checker\":\"MessageItem_message__checker__V5aSl\",\"message__checker_viewed\":\"MessageItem_message__checker_viewed__TovG8\"};","import css from \"./MessageItem.module.css\";\r\nimport cn from \"classnames\";\r\n//* Font Awesome Icon Kit, could be replaced by AntDesign\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faCheckDouble } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { IMessage } from \"../../../../types/types\";\r\n\r\ntype OwnProps = {\r\n  authId: number;\r\n};\r\n\r\ntype Props = OwnProps & IMessage;\r\n\r\nexport const MessageItem: React.FC<Props> = (props) => {\r\n  const isOwnMessage = props.senderId === props.authId;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        css.message__item,\r\n        isOwnMessage ? css.message__item_own : css.message__item_friend\r\n      )}\r\n    >\r\n      {props.body}\r\n      <br></br>\r\n      <span className={css.item__date}>{props.addedAt}</span>\r\n      <FontAwesomeIcon\r\n        icon={!props.viewed ? faCheck : faCheckDouble}\r\n        className={\r\n          !props.viewed ? css.message__checker : css.message__checker_viewed\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { IMessage } from \"../../../types/types\";\r\nimport {\r\n  getCurrentChatUser,\r\n  getMessages\r\n} from \"../../../utilities/selectors/messagesSelector\";\r\nimport css from \"./MessageList.module.css\";\r\nimport base from \"../../../Common.module.css\";\r\nimport { sendMessage } from \"../../../redux/messagesReducer\";\r\nimport { MessageItem } from \"./MessageItem/MessageItem\";\r\nimport { RootState } from \"../../../redux/reduxStore\";\r\nimport { getAuthId } from \"../../../utilities/selectors/authSelector\";\r\n\r\ntype MapStateToProps = {\r\n  messages: Array<IMessage>;\r\n  currentChatUser: number | null;\r\n  authId: number | null;\r\n};\r\ntype MapDispatchToProps = {\r\n  sendMessage: (userId: number, post: string) => void;\r\n};\r\n\r\ntype OwnProps = {};\r\n\r\ntype Props = OwnProps & MapStateToProps & MapDispatchToProps;\r\n\r\nexport const MessageList: React.FC<Props> = (props): JSX.Element => {\r\n\r\n  console.log(props.messages);\r\n\r\n  const messageItems =\r\n    props.messages &&\r\n    props.messages.map((t) => (\r\n      <MessageItem\r\n        body={t.body}\r\n        id={t.id}\r\n        key={t.id}\r\n        addedAt={t.addedAt}\r\n        recipientId={t.recipientId}\r\n        senderId={t.senderId}\r\n        senderName={t.senderName}\r\n        viewed={t.viewed}\r\n        authId={props.authId!}\r\n      />\r\n    ));\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors }\r\n  } = useForm<IMessage>({ defaultValues: { body: \"\" } });\r\n\r\n  const onSubmit = (data: IMessage): void => {\r\n    props.sendMessage(props.currentChatUser!, data.body);\r\n\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <div className={css.message_block}>\r\n      <div className={css.message_list}>{messageItems}</div>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div className={css.message_input_block}>\r\n          <input\r\n            {...register(\"body\", {\r\n              maxLength: {\r\n                value: 100,\r\n                message: \"Max length must be 100 symbols\"\r\n              }\r\n            })}\r\n            className={`${base.input} ${css.message_input_textarea}`}\r\n            type=\"text\"\r\n            name=\"body\"\r\n            id=\"body\"\r\n            placeholder=\"Enter your message here ...\"\r\n          />\r\n          <button className={base.button} type=\"submit\">\r\n            Send\r\n          </button>\r\n        </div>\r\n      </form>\r\n      {errors.body && <div>Error</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    messages: getMessages(state),\r\n    currentChatUser: getCurrentChatUser(state),\r\n    authId: getAuthId(state)\r\n  };\r\n};\r\nconst MessageListContainer = connect<\r\n  MapStateToProps,\r\n  MapDispatchToProps,\r\n  OwnProps,\r\n  RootState\r\n>(mapStateToProps, { sendMessage })(MessageList);\r\n\r\nexport default MessageListContainer;\r\n","//@ts-ignore\r\nimport c from \"./Dialogs.module.css\";\r\nimport ChatContainer from \"./ChatList/ChatContainer\";\r\nimport MessageListContainer from \"./Messages/MessageList\";\r\n\r\nconst ChatPage = (): JSX.Element => {\r\n  return (\r\n    <div className={c.chat}>\r\n      <ChatContainer />\r\n      <MessageListContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"names":["getMessages","state","messagesPage","messages","getFollowedUsers","followedUsers","usersOnPageCountSelector","usersOnPageCount","getCurrentChatUser","currentUserId","ChatItem","props","onClick","getUserMessages","id","className","css","src","photos","avatar","alt","name","status","Chat","usersList","users","map","t","small","getUserMessagesTC","c","compose","connect","getFollowedUserTC","useEffect","MessageItem","isOwnMessage","senderId","authId","cn","body","addedAt","icon","viewed","faCheckDouble","faCheck","currentChatUser","getAuthId","sendMessage","console","log","messageItems","recipientId","senderName","useForm","defaultValues","register","handleSubmit","reset","errors","formState","onSubmit","data","maxLength","value","message","base","type","placeholder"],"sourceRoot":""}