{"version":3,"file":"static/js/285.17edfab1.chunk.js","mappings":"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","sources":["webpack://react-project-01/./src/components/Dailogs/Dialogs.module.css?b0d6","webpack://react-project-01/./src/components/Dailogs/ChatList/Chat.module.css?55a1","utilities/selectors/messagesSelector.ts","webpack://react-project-01/./src/components/Dailogs/ChatList/ChatListItem/ChatItem.module.css?8d85","components/Dailogs/ChatList/ChatListItem/ChatItem.tsx","components/Dailogs/ChatList/ChatContainer.tsx","webpack://react-project-01/./src/components/Dailogs/Messages/MessageList.module.css?8cd7","webpack://react-project-01/./src/components/Dailogs/Messages/MessageItem/MessageItem.module.css?5832","components/Dailogs/Messages/MessageItem/MessageItem.tsx","components/Dailogs/Messages/MessageList.tsx","components/Dailogs/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Dialogs_chat__a-Fvt\"};","// extracted by mini-css-extract-plugin\nexport default {\"chat_list\":\"Chat_chat_list__k1vBC\"};","import { RootState } from \"../../redux/reduxStore\";\r\n\r\nexport const getMessages = (state: RootState) => {\r\n  return state.messagesPage.messages;\r\n};\r\nexport const getFollowedUsers = (state: RootState) => {\r\n  return state.messagesPage.followedUsers;\r\n};\r\nexport const usersOnPageCountSelector = (state: RootState) => {\r\n  return state.messagesPage.usersOnPageCount;\r\n};\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"chat__item\":\"ChatItem_chat__item__nQxFB\",\"avatar__block\":\"ChatItem_avatar__block__Ii2wx\",\"avatar__block_icon\":\"ChatItem_avatar__block_icon__kYIrG\",\"status_circle\":\"ChatItem_status_circle__cziap\",\"green\":\"ChatItem_green__EE6gC\",\"red\":\"ChatItem_red__HARJW\",\"chat__item_text_wrap\":\"ChatItem_chat__item_text_wrap__asedE\",\"chat__item_name\":\"ChatItem_chat__item_name__5doUv\",\"messege_text\":\"ChatItem_messege_text__HHPqe\",\"divider\":\"ChatItem_divider__Bfroa\"};","import { NavLink } from \"react-router-dom\";\r\n// import { User } from \"../../../../types/types\";\r\n//@ts-ignore\r\nimport css from \"./ChatItem.module.css\";\r\n//@ts-ignore\r\nimport avatar from \"../../../../assets/images/avatar.png\";\r\n// import { Photos, User } from \"../../../../types/types\";\r\n\r\ntype Props = {\r\n  id: number;\r\n  photos: string;\r\n  name: string;\r\n  status: string | null;\r\n  // followedUsers: Array<User>\r\n};\r\n\r\nexport const ChatItem: React.FC<Props> = (props): JSX.Element => {\r\n  return (\r\n    <div>\r\n      <NavLink to={\"/messeges/\" + props.id} className={css.chat__item}>\r\n        <div className={css.avatar__block}>\r\n          <img\r\n            src={props.photos || avatar}\r\n            alt=\"avatar\"\r\n            className={css.avatar__block_icon}\r\n          />\r\n          {/* <div className={`${css.status_circle} ${css.green}`}></div> */}\r\n          {/* //TODO Add Active state */}\r\n        </div>\r\n        <div className={css.chat__item_text_wrap}>\r\n          <div className={css.chat__item_name}>{props.name}</div>\r\n          <div className={css.messege_text}>{props.status}</div>\r\n        </div>\r\n        <div className={css.messege_text}>10:04</div>\r\n      </NavLink>\r\n      <hr className={css.divider}></hr>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/reduxStore\";\r\nimport { User } from \"../../../types/types\";\r\nimport c from \"./Chat.module.css\";\r\n// import { withAuthRedirect } from \"../../../hoc/withAuthRedirect\";\r\nimport {\r\n  getFollowedUsers,\r\n  usersOnPageCountSelector,\r\n} from \"../../../utilities/selectors/messagesSelector\";\r\nimport { ChatItem } from \"./ChatListItem/ChatItem\";\r\nimport { getFollowedUserTC } from \"../../../redux/messagesReducer\";\r\n\r\ntype MapStateToProps = {\r\n  users: Array<User> | null;\r\n  usersOnPageCount: number;\r\n};\r\ntype MapDispatchToProps = { getFollowedUserTC: (usersOnPage: number) => void };\r\n\r\ntype OwnProps = {};\r\n\r\ntype Props = OwnProps & MapStateToProps & MapDispatchToProps;\r\n\r\nconst ChatContainer: React.FC<Props> = (props) => {\r\n  const [users, getUsers] = useState(props.users);\r\n\r\n  useEffect(() => {\r\n    props.getFollowedUserTC(props.usersOnPageCount);\r\n  }, [users]);\r\n\r\n  return <Chat {...props} />;\r\n};\r\n\r\nexport const Chat: React.FC<Props> = (props): JSX.Element => {\r\n  const usersList =\r\n    props.users &&\r\n    props.users.map((t: User) => (\r\n      <ChatItem\r\n        name={t.name}\r\n        id={t.id}\r\n        key={t.id}\r\n        status={t.status}\r\n        photos={t.photos.small!}\r\n      />\r\n    ));\r\n\r\n  return <div className={c.chat_list}>{usersList}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToProps => {\r\n  return {\r\n    users: getFollowedUsers(state),\r\n    usersOnPageCount: usersOnPageCountSelector(state),\r\n  };\r\n};\r\nexport default compose(\r\n  connect<MapStateToProps, MapDispatchToProps, OwnProps, RootState>(\r\n    mapStateToProps,\r\n    { getFollowedUserTC }\r\n  )\r\n  // withAuthRedirect //TODO add TS to 'withAuthRedirect'\r\n)(ChatContainer);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message_block\":\"MessageList_message_block__BcR0u\",\"message_list\":\"MessageList_message_list__eMYqN\",\"message_input_block\":\"MessageList_message_input_block__wnvho\",\"message_input_textarea\":\"MessageList_message_input_textarea__9gN-O\"};","// extracted by mini-css-extract-plugin\nexport default {\"message_item_own\":\"MessageItem_message_item_own__bs13g\",\"message_item_friend\":\"MessageItem_message_item_friend__eniLu\"};","import css from \"./MessageItem.module.css\";\r\n\r\ntype Props = {\r\n  id?:number\r\n  isOwn: boolean\r\n  text:string\r\n}\r\n\r\nexport const MessageItem: React.FC<Props> = (props) => {\r\n  let isOwnMessage = props.isOwn;\r\n\r\n  return (\r\n    <div\r\n      className={isOwnMessage ? css.message_item_own : css.message_item_friend}\r\n    >\r\n      {props.text}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Message } from \"../../../types/types\";\r\nimport { getMessages } from \"../../../utilities/selectors/messagesSelector\";\r\nimport css from \"./MessageList.module.css\";\r\nimport base from \"../../../Common.module.css\";\r\nimport { sendMessage } from \"../../../redux/messagesReducer\";\r\nimport { MessageItem } from \"./MessageItem/MessageItem\";\r\nimport { RootState } from \"../../../redux/reduxStore\";\r\n\r\ntype MapStateToProps = {\r\n  messages: Array<Message>;\r\n};\r\ntype MapDispatchToProps = {\r\n  sendMessage: (data: string) => void;\r\n};\r\n\r\ntype OwnProps = {};\r\n\r\ntype Props = OwnProps & MapStateToProps & MapDispatchToProps;\r\n\r\nexport const MessageList: React.FC<Props> = (props): JSX.Element => {\r\n  const messageItems = props.messages.map((t) => (\r\n    <MessageItem text={t.text} id={t.id} key={t.id} isOwn={t.isOwn} />\r\n  ));\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({ defaultValues: { message: \"\" } });\r\n\r\n  const onSubmit = (data: any) => {\r\n    props.sendMessage(data.message);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <div className={css.message_block}>\r\n      <div className={css.message_list}>{messageItems}</div>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div className={css.message_input_block}>\r\n          <input\r\n            {...register(\"message\", {\r\n              maxLength: {\r\n                value: 100,\r\n                message: \"Max length must be 100 symbols\",\r\n              },\r\n            })}\r\n            className={`${base.input} ${css.message_input_textarea}`}\r\n            type=\"text\"\r\n            name=\"message\"\r\n            id=\"message\"\r\n            placeholder=\"Enter your message here ...\"\r\n          />\r\n          <button className={base.button} type=\"submit\">\r\n            Send\r\n          </button>\r\n        </div>\r\n      </form>\r\n      {errors.message && <div>Error</div>}\r\n      {/* //TODO Add Error Message display logic (was errors.callback) */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    messages: getMessages(state),\r\n  };\r\n};\r\nconst MessageListContainer = connect<\r\n  MapStateToProps,\r\n  MapDispatchToProps,\r\n  OwnProps,\r\n  RootState\r\n>(mapStateToProps, { sendMessage })(MessageList);\r\n\r\nexport default MessageListContainer;\r\n","//@ts-ignore\r\nimport c from \"./Dialogs.module.css\";\r\nimport ChatContainer from \"./ChatList/ChatContainer\";\r\nimport MessageListContainer from \"./Messages/MessageList\";\r\n\r\nconst ChatPage = (): JSX.Element => {\r\n  return (\r\n    <div className={c.chat}>\r\n      <ChatContainer />\r\n      <MessageListContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"names":["getMessages","state","messagesPage","messages","getFollowedUsers","followedUsers","usersOnPageCountSelector","usersOnPageCount","ChatItem","props","to","id","className","css","src","photos","avatar","alt","name","status","Chat","usersList","users","map","t","small","c","compose","connect","getFollowedUserTC","useState","useEffect","MessageItem","isOwnMessage","isOwn","text","sendMessage","messageItems","useForm","defaultValues","message","register","handleSubmit","reset","errors","formState","onSubmit","data","maxLength","value","base","type","placeholder"],"sourceRoot":""}